class Sgen{constructor(){this.lfOsc,this.klglott88Osc,this.audioContext,this.scriptNode,this.isPlaying=!1,this.genki=!0,this.oshaberi=!1,this.vowels=[],this.vowelOsc,this.vowelNoise,this.vowelFiltf1,this.vowelFiltf2,this.vowelFiltf3,this.vowelEnv,this.vowelCurrentPitch=0,this.vowelTargetPitch=0,this.vowelCurrentF1=0,this.vowelTargetF1=0,this.vowelCurrentF2=0,this.vowelTargetF2=0,this.vowelCurrentF3=0,this.vowelTargetF3=0,this.isVowelPlaying=!1,this.vowelPlayTimeout=null,this.isVowelPlaying=!1,this.vowelAttackTime=.15,this.vowelReleaseTime=.1,this.vowelF1min=300,this.vowelF1max=1900,this.vowelF2min=800,this.vowelF2max=2e3,this.vowelF3min=1e3,this.vowelF3max=2200,this.vowelBaseF3=random(this.vowelF3min,this.vowelF3max),this.formantRandomRange=1e3,this.randomFormantValue=random(-this.formantRandomRange,this.formantRandomRange),this.randomFormantValue2=random(-this.formantRandomRange,this.formantRandomRange),this.formantUpdateInterval=10,this.formantSmoothingFactor=.2,this.vowelGain1=new p5.Gain,this.vowelGain1.amp(1),this.vowelGain1.connect(),this.vowelFiltf1=new p5.BandPass,this.vowelFiltf2=new p5.BandPass,this.vowelFiltf3=new p5.BandPass,this.vowelFiltf1.disconnect(),this.vowelFiltf2.disconnect(),this.vowelFiltf3.disconnect(),this.vowelF1resonance=12,this.vowelF2resonance=12,this.vowelF3resonance=12,this.vowelFiltf1.res(this.vowelF1resonance),this.vowelFiltf2.res(this.vowelF2resonance),this.vowelFiltf3.res(this.vowelF3resonance),this.vowelFiltf1.amp(1),this.vowelFiltf2.amp(.5),this.vowelFiltf3.amp(.2),this.vowelGain1.setInput(this.vowelFiltf1),this.vowelGain1.setInput(this.vowelFiltf2),this.vowelGain1.setInput(this.vowelFiltf3),this.vowelEnv=new p5.Envelope,this.vowelEnv.setADSR(this.vowelAttackTime,.1,1,this.vowelReleaseTime),this.vowelEnv.setRange(1,0),this.vowelEnv.connect(this.vowelGain1.input.gain),this.vowelCurrentF1=this.vowelTargetF1=(this.vowelF1min+this.vowelF1max)/2,this.vowelCurrentF2=this.vowelTargetF2=(this.vowelF2min+this.vowelF2max)/2,this.vowelCurrentF3=this.vowelTargetF3=this.vowelBaseF3,this.vowelFiltf1.freq(this.vowelCurrentF1),this.vowelFiltf2.freq(this.vowelCurrentF2),this.vowelFiltf3.freq(this.vowelCurrentF3),this.vowelNoise=new p5.Noise("pink"),this.vowelNoise.amp(0),this.vowelNoise.disconnect(),this.vowelNoise.connect(this.vowelFiltf1),this.vowelNoise.connect(this.vowelFiltf2),this.vowelNoise.connect(this.vowelFiltf3),this.vowelNoise.start(),this.baseNoiseIncrement=.05,this.fastNoiseIncrement=.4,this.noiseOffset=0,this.noiseIncrement=this.baseNoiseIncrement,this.noiseValue=0,this.fineNoiseOffset=0,this.fineNoiseIncrement=1,this.fineNoiseValue=0,this.fineNoiseInfluence=0,this.noiseOffset2=1e4,this.noiseIncrement2=2.8*this.baseNoiseIncrement,this.noiseValue2=0,this.noiseOffset3=100,this.noiseIncrement3=3.8*this.baseNoiseIncrement,this.noiseValue3=0,this.noiseOffset4=1e3,this.noiseIncrement4=70.8*this.baseNoiseIncrement,this.noiseValue4=0,this.noiseSpontaneousOffset=200,this.noiseSpontaneousIncrement=.008,this.noiseSpontaneousValue=0,this.currentPitch=0,this.targetPitch=0,this.midiNoteMin=24,this.midiNoteMax=96,this.scales={major:[0,2,4,5,7,9,11],minor:[0,2,3,5,7,8,10],pentatonic:[0,2,4,7,9],original:[0,2,4,5,7,9]},this.currentScale=this.scales.original,this.rootNote=9,this.baseMidiNote=57,this.pitchNoiseMultiplier=12,this.vibratoRate=9.2,this.vibratoDepth=10,this.volumeVibratoDepth=.1,this.vibratoRampUpTime=qb.rndm(1,1.7),this.pitchFluctuationDepth=7,this.vibratoRateFluctuationDepth=.14,this.vbratoDepthFluctuationDepth=.3,this.vibratoStartTime=null,this.currentVibratoDepth=0,this.isVibratoActive=!1,this.vibrato=0,this.pitchSmoothingFactor=.45,this.pitchSmoothingFactorVibrato=.95,this.targetVowelVolumeSlunt=1,this.currentVowelVolume=0,this.targetVowelVolume=0,this.maxVowelVolume=.9*otomag_gen,this.vowelVolumeBoost=0,this.volumeSmoothingFactor=.07,this.vowelVolumeFluctuationAmount=.9,this.mappedNoise=0,this.melodyPatterns={pattern1:[0,-12,0,2,5,4,2,2,0]},this.currentPattern=null,this.patternIndex=0,this.isPlayingPattern=!1,this.patternProbability=.3,this.vowelX=0,this.vowelY=0,this.currentPitchEnvValue=0,this.targetPitchEnvValue=0,this.pitchEnvInfluence=0,this.pitchEnvInfluenceMax=qb.rndm(-36,0),this.pitchEnvSmoothingFactor=qb.rndm(.43,.6),Math.random()<.1&&(this.pitchEnvSmoothingFactor=qb.rndm(.4,.81)),this.spontaneous=!1,this.stoppingVowel=!1,this.isIkigireActive=!1,this.ikigireFactorMax=2.1,this.ikigireFactorMin=0,this.minVowelDuration=2500,this.maxVowelDuration=3500,this.cutVowelMinDelay=400,this.cutVowelMaxDelay=1e3,this.ikigireProbability=.7,this.cutVowelProbability=.37,this.vowelReleaseTimeMax=.2,this.openCloseSnoto=.66}f_set_vibratorndm(){Math.random()<.5&&(this.vibratoRate=qb.rndm(this.vibratoRate-2,this.vibratoRate+2)),Math.random()<.01&&(this.vibratoRate=qb.rndm(this.vibratoRate-2,this.vibratoRate+10)),Math.random()<.5&&(this.vibratoDepth=qb.rndm(this.vibratoDepth-2,this.vibratoDepth+2)),Math.random()<.01&&(this.vibratoRampUpTime=qb.rndm(this.vibratoRampUpTime,this.vibratoRampUpTime+3))}setup(){this.audioContext=getAudioContext(),this.lfOsc=new LFOscillator(this.audioContext),this.lfOsc.initialize(),this.lfOsc.connect(this.vowelFiltf1),this.lfOsc.connect(this.vowelFiltf2),this.lfOsc.connect(this.vowelFiltf3),getAudioContext().resume()}f_ef(){this.moodChanger(),this.vowelX=nnyu.dragmx,this.adjust(this.vowelX,this.vowelY),this.updateParameters(),this.noiseValue=noise(this.noiseOffset),this.noiseOffset+=this.noiseIncrement,this.noiseValue2=noise(this.noiseOffset2),this.noiseOffset2+=this.noiseIncrement2,this.noiseValue3=noise(this.noiseOffset3),this.noiseOffset3+=this.noiseIncrement3,this.noiseValue4=noise(this.noiseOffset4),this.noiseOffset4+=this.noiseIncrement4,this.fineNoiseValue=noise(this.fineNoiseOffset),this.fineNoiseOffset+=this.fineNoiseIncrement,this.fineNoiseInfluence=map(this.fineNoiseValue,0,1,-1,1),this.noiseSpontaneousValue=noise(this.noiseSpontaneousOffset),this.noiseSpontaneousOffset+=this.noiseSpontaneousIncrement}adjust(t,i){this.vowelTargetF1=map(globalOpenclosev+.15*this.fineNoiseInfluence,this.openCloseSnoto,1,this.vowelF1min,this.vowelF1max)+this.randomFormantValue,this.vowelTargetF2=map(t,0,canvwh.w,this.vowelF2min,this.vowelF2max)+this.randomFormantValue2,this.vowelTargetF3=this.vowelBaseF3+this.randomFormantValue,this.vowelTargetF1=constrain(this.vowelTargetF1,this.vowelF1min,this.vowelF1max),this.vowelTargetF2=constrain(this.vowelTargetF2,this.vowelF2min,this.vowelF2max),this.vowelTargetF3=constrain(this.vowelTargetF3,this.vowelF3min,this.vowelF3max)}updateParameters(){if(this.lfOsc){let t=1.5+3*this.noiseValue2-this.ikigireFactor;t=constrain(t,0,3),this.lfOsc.amp(t);let i=map(this.noiseValue3,0,1,.1,1.9);this.lfOsc.setRd(i);let e=map(this.noiseValue,0,1,.5,.8);this.lfOsc.setTeRatio(e);let s=map(globalOpenclosev+.15*this.fineNoiseInfluence,.66,1,.1,.9);this.lfOsc.setTpRatio(s);let a=map(this.noiseValue2,0,1,.01,.1);this.lfOsc.setTaRatio(a),this.currentPitch=lerp(this.currentPitch,this.targetPitch,this.pitchSmoothingFactor);let o=map(this.noiseValue,0,1,-1,1)*this.pitchFluctuationDepth,h=this.currentPitch+o;if(this.isVibratoActive){let t=millis()/1e3-this.vibratoStartTime,i=constrain(t/this.vibratoRampUpTime,0,1);this.currentVibratoDepth=this.vibratoDepth*i+.1;let e=(sin(.04*frameCount)+sin(.06*frameCount))/2*this.vibratoRateFluctuationDepth,s=this.vibratoRate+e,a=sin(frameCount*s/30*TWO_PI/60)*this.vbratoDepthFluctuationDepth,o=this.currentVibratoDepth*((1+a)/2);this.vibrato=sin(frameCount*s*TWO_PI/60)*o}else this.vibrato=0;let n=this.currentPitchEnvValue*this.pitchEnvInfluenceMax,r=h+this.vibrato+n-20*this.ikigireFactor;if(this.oshaberi){let t=map(this.noiseValue3,0,1,-500,500);this.currentPitch=lerp(this.currentPitch,r+t,this.pitchSmoothingFactorVibrato),this.lfOsc.setFrequency(this.currentPitch)}else this.currentPitch=lerp(this.currentPitch,r,this.pitchSmoothingFactorVibrato),this.lfOsc.setFrequency(this.currentPitch);frameCount%this.formantUpdateInterval==0&&(this.vowelTargetF1+=random(-this.formantRandomRange/2,this.formantRandomRange/2),this.vowelTargetF2+=random(-this.formantRandomRange/2,this.formantRandomRange/2),this.vowelTargetF3+=random(-this.formantRandomRange/2,this.formantRandomRange/2),this.vowelTargetF1=constrain(this.vowelTargetF1,this.vowelF1min,this.vowelF1max),this.vowelTargetF2=constrain(this.vowelTargetF2,this.vowelF2min,this.vowelF2max),this.vowelTargetF3=constrain(this.vowelTargetF3,this.vowelF3min,this.vowelF3max)),this.vowelCurrentF1=lerp(this.vowelCurrentF1,this.vowelTargetF1,this.formantSmoothingFactor),this.vowelCurrentF2=lerp(this.vowelCurrentF2,this.vowelTargetF2,this.formantSmoothingFactor),this.vowelCurrentF3=lerp(this.vowelCurrentF3,this.vowelTargetF3,this.formantSmoothingFactor),this.vowelFiltf1.freq(this.vowelCurrentF1),this.vowelFiltf2.freq(this.vowelCurrentF2),this.vowelFiltf3.freq(this.vowelCurrentF3),this.vowelNoise.amp(.3+.4*this.noiseValue3),globalOpenclosev>=0&&globalOpenclosev<=.5?this.targetVowelVolumeSlunt=.1:globalOpenclosev>.5&&globalOpenclosev<=.8?this.targetVowelVolumeSlunt=.5:this.targetVowelVolumeSlunt=1,this.targetVowelVolume=Math.max(0,map(constrain(globalOpenclosev,.66,1),.66,1,0,this.maxVowelVolume));let l=this.vibrato*this.volumeVibratoDepth,m=1-this.noiseValue*this.vowelVolumeFluctuationAmount,c=this.targetVowelVolume*m*this.targetVowelVolumeSlunt+l;this.currentVowelVolume=lerp(this.currentVowelVolume,c,this.volumeSmoothingFactor),this.vowelGain1.amp(this.currentVowelVolume),this.currentPitchEnvValue=lerp(this.currentPitchEnvValue,this.targetPitchEnvValue,this.pitchEnvSmoothingFactor)}}playVowel(){this.f_set_vibratorndm(),this.vowelNoise.amp(.55),this.vowelEnv.triggerAttack(),this.isVowelPlaying=!0,this.vibratoStartTime=millis()/1e3,this.isVibratoActive=!0,this.currentVibratoDepth=0,this.targetPitchEnvValue=0,random()<this.cutVowelProbability&&this.cutVowel(this.cutVowelMinDelay,this.cutVowelMaxDelay);const t=random(this.minVowelDuration,this.maxVowelDuration);this.vowelPlayTimeout=setTimeout((()=>{this.isVowelPlaying&&this.cutVowel(800,1500)}),t)}cutVowel(t=200,i=1e3){this.stoppingVowel=!0;const e=random(t,i),s=e*random(.5,.8);random()<this.ikigireProbability&&(console.log("ikigire start"),setTimeout((()=>{this.isIkigireActive=!0}),s)),this.vowelPlayTimeout=setTimeout((()=>{this.stopVowel(),this.stoppingVowel=!1,this.isIkigireActive=!1}),e)}stopVowel(){this.vowelReleaseTime=random(.1,this.vowelReleaseTimeMax),this.vowelEnv.setADSR(this.vowelAttackTime,.1,1,this.vowelReleaseTime),this.stoppingVowel=!1,this.vowelPlayTimeout&&(clearTimeout(this.vowelPlayTimeout),this.vowelPlayTimeout=null),this.isVowelPlaying&&(this.vowelEnv.triggerRelease(),this.isVowelPlaying=!1,this.isVibratoActive=!1,this.currentVibratoDepth=0,this.targetPitchEnvValue=1),this.isIkigireActive=!1}calculateScale(t){return this.currentScale.map((i=>t+i+this.rootNote))}changeScale(t,i=0){this.scales[t]&&(this.currentScale=this.scales[t],this.rootNote=i)}snapToScale(t){let i=Math.floor(t/12),e=t%12;return 12*i+this.currentScale.map((t=>(t+this.rootNote)%12)).reduce(((t,i)=>Math.abs(i-e)<Math.abs(t-e)?i:t))}openMouse(){this.randomFormantValue=random(-this.formantRandomRange,this.formantRandomRange),this.randomFormantValue2=random(-this.formantRandomRange,this.formantRandomRange);let t=qb.rndm(this.maxVowelVolume,this.maxVowelVolume+.3);if(Math.random()<.6&&(t=this.maxVowelVolume+.3),this.maxVowelVolume=t*otomag_gen+this.vowelVolumeBoost,!this.isPlayingPattern&&this.oshaberi){let t=this.baseMidiNote+this.pitchNoiseMultiplier*random([-.2,-.1,0,0,.2,.4,.8]);this.targetPitch=midiToFreq(t)}if(this.isPlayingPattern&&this.currentPattern){let t=this.patternIndex;if(this.patternIndex=(this.patternIndex+1)%this.currentPattern.length,t!==this.patternIndex){this.baseMidiNote,this.currentPattern[this.patternIndex]}let i=this.baseMidiNote+this.currentPattern[this.patternIndex],e=this.snapToScale(i);this.targetPitch=midiToFreq(e),this.patternIndex===this.currentPattern.length-1&&this.stopPattern()}else if(!this.oshaberi&&!this.spontaneous){console.log("not oshaberi and not spontaneous"),this.mappedNoise=map(this.noiseValue,0,1,-1,1);let t=this.baseMidiNote+this.pitchNoiseMultiplier*this.mappedNoise,i=this.snapToScale(t);this.targetPitch=midiToFreq(i)}this.playVowel()}startPattern(t){this.melodyPatterns[t]&&(this.currentPattern=this.melodyPatterns[t],this.patternIndex=-1,this.isPlayingPattern=!0,this.pitchEnvInfluence=0)}stopPattern(){this.isPlayingPattern=!1,this.currentPattern=null,this.pitchEnvInfluence=this.pitchEnvInfluenceMax}moodChanger(){if(this.isIkigireActive?(this.ikigireFactor=map(this.noiseValue4,0,1,.8,this.ikigireFactorMax),this.targetPitch+=random(-10,1)):this.ikigireFactor=this.ikigireFactorMin,!this.isPlayingPattern&&!this.oshaberi&&this.spontaneous){let t=this.baseMidiNote+this.pitchNoiseMultiplier*this.noiseSpontaneousValue,i=this.snapToScale(t);this.targetPitch=midiToFreq(i)}this.moodChangeInterval||(this.moodChangeInterval=random(1e4,15e3),this.lastMoodChangeTime=millis()),millis()-this.lastMoodChangeTime>this.moodChangeInterval&&(this.isPlayingPattern&&this.stopPattern(),random()<this.patternProbability&&this.startPattern("pattern1"),this.moodChangeInterval=random(5e3,15e3),this.lastMoodChangeTime=millis())}}class LFOscillator{constructor(t){this.audioContext=t,this.scriptNode=null,this.gainNode=null,this.currentTime=0,this.lastSample=0,this.debugBuffer=new Float32Array(2048),this.debugIndex=0,this.currentParams={frequency:120,Ee:1,teRatio:.7,tpRatio:.4,taRatio:.02,Rd:1},this.targetParams=null,this.transitionSamples=0,this.transitionLength=.01*this.audioContext.sampleRate,this.cachedParams={alpha:null,epsilon:null,E0:null,lastT0:null},this.interpolationSpeed=100,this.frequencyDelta=0,this.constraints={frequency:{min:20,max:2e3},Ee:{min:.1,max:2},teRatio:{min:.3,max:.8},tpRatio:{min:.1,max:.9},taRatio:{min:.01,max:.1},Rd:{min:.1,max:2}},this.targetAmp=1,this.currentAmp=1,this.ampSmoothingFactor=.001}async initialize(){this.scriptNode=this.audioContext.createScriptProcessor(2048,1,1),this.gainNode=this.audioContext.createGain(),this.gainNode.gain.value=2,this.scriptNode.onaudioprocess=this.process.bind(this),this.scriptNode.connect(this.gainNode)}connect(t){this.gainNode.connect(t)}disconnect(){this.gainNode.disconnect()}resetCache(){this.cachedParams={alpha:null,epsilon:null,E0:null,lastT0:null}}calcEpsilon(t,i,e){if(this.cachedParams.epsilon&&this.cachedParams.lastT0===t)return this.cachedParams.epsilon;const s=t-i;let a=1/e*(1+2*this.currentParams.Rd)/2;const o=Math.exp(-a*s);return o>.02?a*=1.2:o<.001&&(a*=.8),a=Math.max(.001,Math.min(150,a)),a=Math.round(2e3*a)/2e3,this.cachedParams.epsilon=a,this.cachedParams.lastT0=t,a}calcAlpha(t,i){if(this.cachedParams.alpha)return this.cachedParams.alpha;const e=Math.PI/i,s=this.currentParams.Rd;let a=e/(2*Math.PI)*(1+s);return i<.4*t&&(a*=1.2),a=Math.max(.001,Math.min(3,a)),a=Math.round(7500*a)/7500,this.cachedParams.alpha=a,a}calcE0(t,i,e){if(this.cachedParams.E0)return this.cachedParams.E0;const{Ee:s}=this.currentParams,a=Math.PI/i,o=Math.max(.01,Math.abs(Math.sin(a*t))),h=-s*Math.exp(-e*t)/o;return this.cachedParams.E0=h,h}_ugPrimeSine(t,i,e,s){const a=Math.PI/s,o=this.calcAlpha(e,s),h=this.calcE0(e,s,o),n=t/e,r=1-.2*Math.sin(Math.PI*n);return h*Math.exp(o*t)*Math.sin(a*t)*r}_ugPrimeUp(t,i,e,s){const a=this.calcEpsilon(i,e,s),o=i-e,h=(t-e)/o,n=1-.3*Math.pow(h,2);return-this.currentParams.Ee/(a*s)*(Math.exp(-a*(t-e))-Math.exp(-a*o))*n}constrainParam(t,i){return this.constraints[t]?Math.max(this.constraints[t].min,Math.min(this.constraints[t].max,i)):i}updateParams(t){this.targetParams={...this.currentParams,...Object.fromEntries(Object.entries(t).map((([t,i])=>[t,this.constrainParam(t,i)])))}}process(t){const i=t.outputBuffer.getChannelData(0);for(let t=0;t<i.length;t++){this.currentAmp+=(this.targetAmp-this.currentAmp)*this.ampSmoothingFactor,this.interpolateParams(),this.currentParams.frequency+=this.frequencyDelta;const e=1/this.currentParams.frequency,s=e*this.currentParams.teRatio,a=s*this.currentParams.tpRatio,o=e*this.currentParams.taRatio;let h;this.currentTime>=e&&(this.currentTime-=e,this.resetCache()),h=this.currentTime<=s?this._ugPrimeSine(this.currentTime,e,s,a):this._ugPrimeUp(this.currentTime,e,s,o);const n=.001;if(h=Math.max(-1,Math.min(1,.3*h+n)),this.currentTime+1/this.audioContext.sampleRate>=e){const t=this.currentTime+1/this.audioContext.sampleRate-e,i=this._ugPrimeSine(t,e,s,a),o=(this.currentTime-(e-1/this.audioContext.sampleRate))*this.audioContext.sampleRate;h=h*(1-o)+i*o}const r=.1;h=this.lastSample*(1-r)+h*r,i[t]=h*this.currentAmp,this.lastSample=h,this.debugBuffer[this.debugIndex]=h,this.debugIndex=(this.debugIndex+1)%this.debugBuffer.length,this.currentTime+=1/this.audioContext.sampleRate}}interpolateParams(){if(this.targetParams){const t=this.interpolationSpeed/this.audioContext.sampleRate;this.frequencyDelta=(this.targetParams.frequency-this.currentParams.frequency)*t;for(const i in this.targetParams)"frequency"!==i&&(this.currentParams[i]=this.constrainParam(i,this.currentParams[i]+(this.targetParams[i]-this.currentParams[i])*t));let i=!0;for(const t in this.targetParams)if(Math.abs(this.currentParams[t]-this.targetParams[t])>1e-4){i=!1;break}i&&(this.currentParams={...this.targetParams},this.targetParams=null,this.frequencyDelta=0)}}setFrequency(t){this.updateParams({frequency:t})}setRd(t){this.updateParams({Rd:t})}setTeRatio(t){this.updateParams({teRatio:t})}setTpRatio(t){this.updateParams({tpRatio:t})}setTaRatio(t){this.updateParams({taRatio:t})}amp(t){this.gainNode&&(this.targetAmp=t,this.gainNode.gain.setTargetAtTime(t,this.audioContext.currentTime,.01))}}